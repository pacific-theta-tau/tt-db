// This package defines server and routes
package api

import (
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
    "github.com/go-chi/cors"
	"github.com/pacific-theta-tau/tt-db/api/handlers"
	"github.com/pacific-theta-tau/tt-db/db"
    _ "github.com/pacific-theta-tau/tt-db/docs" // docs is generated by Swag CLI, you have to import it.
    "github.com/swaggo/http-swagger" // http-swagger middleware
)

// TODO: Create a Pgpool instead using dependency injection
type Application struct {
	Database    *db.PostgresDB
	DatabaseURL string
	Port        string
}

// Constructor for Application struct
func NewApplication(db *db.PostgresDB, port string) *Application {
	return &Application{
		Database: db,
		Port:     port,
	}
}

// Connect to database, start routers, and serve app
func (app *Application) Serve() {
    log.Println("-- Application.Serve() --")
	// Connect to database
	app.Database.Connect()

	// Start routers and middleware
	handler := handlers.NewHandler(app.Database.Conn)
	routes := setupRoutes(handler)

	//TODO: cleaner address
	addr := fmt.Sprint(":", app.Port)
	log.Printf("App address: %s", addr)
	err := http.ListenAndServe(addr, routes)
	if err != nil {
        log.Fatalf("Error while serving application: %v", err)
	}
}


//	@title			Swagger Example API
//	@version		1.0
//	@description	Setup mux with all middleware and routes
//	@termsOfService	http://swagger.io/terms/

//	@contact.name	API Support
//	@contact.url	http://www.swagger.io/support
//	@contact.email	support@swagger.io

//	@license.name	Apache 2.0
//	@license.url	http://www.apache.org/licenses/LICENSE-2.0.html

//	@host		petstore.swagger.io
//	@BasePath	/api
func setupRoutes(handler *handlers.Handler) *chi.Mux {
    log.Println("Setting up routes...")
	r := chi.NewRouter()

    // Setup Middleware
    // TODO: look into slog for structured logging
	r.Use(middleware.Logger)
    corsHandler := cors.New(cors.Options{
        AllowedOrigins:   []string{"*"},     // Allow all origins
        AllowedMethods:   []string{"GET", "PATCH", "POST", "PUT", "DELETE", "OPTIONS"},
        AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
        ExposedHeaders:   []string{"Link"},
        AllowCredentials: true,
        MaxAge:           300, // Maximum value not ignored by any of major browsers
    })
    r.Use(corsHandler.Handler)

    // Endpoints
    r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
	))
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Hello World!"))
	})

	// brothers endpoint
	r.Get("/api/brothers", handler.GetAllBrothers)
	//r.Get("/api/brothers/{rollCall}", handler.GetBrotherByRollCall)
	r.Get("/api/brothers/{id}", handler.GetBrotherByID)
	r.Post("/api/brothers", handler.AddBrother)
	r.Patch("/api/brothers/{id}", handler.UpdateBrother)
	r.Delete("/api/brothers", handler.RemoveBrother)
    // brothers count
	r.Get("/api/brothers/count", handler.GetBrothersCount)
	r.Get("/api/brothers/majors/count", handler.GetBrothersMajorsCount)
    r.Get("/api/brothers/statuses", handler.GetAllBrotherStatuses)
	r.Get("/api/brothers/statuses/count", handler.GetBrotherStatusCount)

    // brotherStatus endpoints
    // r.Get("/api/statuses", handler.GetAllBrotherStatuses)
    r.Get("/api/statuses", handler.GetAllStatusLabels)
    r.Get("/api/brothers/{id}/statuses", handler.GetBrotherStatusHistory)
    r.Post("/api/brothers/{id}/statuses", handler.CreateBrotherStatus)
    r.Delete("/v1/brothers/{brotherID}/statuses/{semesterID}", handler.DeleteStatusByMemberAndSemesterHandler)

    // events endpoint
	r.Get("/api/events", handler.GetAllEvents)
	r.Get("/api/events/{eventID}", handler.GetEventByEventID)
	r.Get("/api/events/{eventID}/attendance", handler.GetEventAttendance)
	r.Post("/api/events/{eventID}/attendance", handler.CreateAttendanceRecordForEvent)
    r.Post("/api/events", handler.CreateEvent)
    r.Put("/api/events", handler.UpdateEventByID)
    r.Delete("/api/events", handler.DeleteEventByEventID)

    // attendance endpoints
    r.Get("/api/attendance", handler.GetAllAttendanceRecords)
    r.Get("/api/attendance/{eventID}", handler.GetAttendanceFromEventID)
    r.Post("/api/attendance", handler.CreateAttendance)
    r.Put("/api/attendance", handler.UpdateAttendanceRecord)
    r.Delete("/api/attendance", handler.DeleteAttendanceRecord)

    // semester endpoints
    r.Get("/api/semesters", handler.GetAllSemesterLabels)
    r.Post("/api/semesters", handler.CreateSemesterLabel)
    r.Get("/api/semesters/{semester}/statuses", handler.GetAllBrotherStatusesForSemester)
    r.Post("/api/semesters/{semester}/statuses", handler.CreateBrotherStatusForSemester)

	return r
}
